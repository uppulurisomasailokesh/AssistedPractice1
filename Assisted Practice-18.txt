package oops;
class Person {
    String name;
    int age;
    // Constructor
    public Person(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    // Method to display information about the person
    public void displayInfo() 
    {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }
}

public class Class_object 
{
	public static void main(String[] args)
	{
	        // Creating objects of the Person class
	        Person person1 = new Person("John Doe", 25);
	        Person person2 = new Person("Jane Doe", 30);

	        // Accessing object properties
	        System.out.println("Details of person1:");
	        person1.displayInfo();

	        System.out.println("\nDetails of person2:");
	        person2.displayInfo();
	    }
}
=========================================================================

package oops;
abstract class Shape 
{
    
    public abstract double calculateArea(); 
}

class Circle extends Shape
{
    private double radius;

    
    public Circle(double radius)
    {
        this.radius = radius;
    }

    
    @Override
    public double calculateArea()
    {
        return Math.PI * radius * radius;
    }
}

class Rectangle extends Shape 
{
    private double length;
    private double width;

    
    public Rectangle(double length, double width) 
    {
        this.length = length;
        this.width = width;
    }

    
    @Override
    public double calculateArea() 
    {
        return length * width;
    }
}
public class Abstraction 
{
	 public static void main(String[] args) {
	        Shape circle = new Circle(5.0);
	        Shape rectangle = new Rectangle(4.0, 3.0);

	        System.out.println("Area of Circle: " + circle.calculateArea());
	        System.out.println("Area of Rectangle: " + rectangle.calculateArea());
	    }

}
==========================================================================================
package oops;
class Student {
    private String name;
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if (age > 0) {
            this.age = age;
        } else {
            System.out.println("Invalid age. Age should be a positive integer.");
        }
    }
}

public class Encupsulation 
{
	    public static void main(String[] args)
	    {
	        Student student1 = new Student();
	        student1.setName("John");
	        student1.setAge(25);	        
	        System.out.println("Name: " + student1.getName());
	        System.out.println("Age: " + student1.getAge());
	    }
	


}
================================================================================

package oops;
class Vehicle
{
    String make;
    String model;
    int year;

    public Vehicle(String make, String model, int year) 
    {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void displayInfo()
    {
        System.out.println("Make: " + make);
        System.out.println("Model: " + model);
        System.out.println("Year: " + year);
    }
}

class Car extends Vehicle
{
    int numDoors;

    public Car(String make, String model, int year, int numDoors) {
        super(make, model, year);
        this.numDoors = numDoors;
    }

    public void displayCarInfo()
    {
        displayInfo();
        System.out.println("Number of Doors: " + numDoors);
    }
}
public class Inheritance 
{
    public static void main(String[] args) {
        Car car1 = new Car("Toyota", "Camry", 2022, 4);

        car1.displayInfo();

        System.out.println(); 
        car1.displayCarInfo();
    }
	

}
=====================================================================================


package oops;
class Animal
{
    public void makeSound()
    {
        System.out.println("Some generic sound");
    }
}

class Dog extends Animal 
{
    @Override
    public void makeSound() 
    {
        System.out.println("Woof!");
    }
}

class Cat extends Animal 
{
    @Override
    public void makeSound()
    {
        System.out.println("Meow!");
    }
}
public class Polymorphism 
{
	 public static void main(String[] args) {
	        Animal animal1 = new Dog();
	        Animal animal2 = new Cat();

	        animal1.makeSound(); 
	        animal2.makeSound(); 
	    }
	

}
